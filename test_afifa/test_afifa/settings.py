"""
Django settings for test_afifa project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
from django.core.exceptions import ImproperlyConfigured

import dotenv

dotenv.load_dotenv()


def get_from_config(setting, default=None):
    try:
        val = os.environ.get(setting, default)

        # json can only store strings, so convert to bools here if needed
        if val == 'True':
            val = True
        elif val == 'False':
            val = False
        return val

    except KeyError:
        error_msg = f"ImproperlyConfigured: Set {setting} environment variable"
        raise ImproperlyConfigured(error_msg)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.isdir(LOG_DIR):
    os.mkdir(LOG_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-285+bvxb-7!gf_jzuy%hb$*^b@5!@)ba+tbav#r63m1tjt%m-t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'drf_yasg',
    'main'
]

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'test_afifa.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'test_afifa.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_from_config("DB_NAME", "test_afifa"),
        'USER': get_from_config("DB_USER", "postgres"),
        'PASSWORD': get_from_config("DB_PASSWORD", "admin#afifa"),
        'HOST': get_from_config("DB_HOST", "postgresdb"),
        'PORT': get_from_config("DB_PORT", "5432")
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s %(name)s : \n%(message)s\n'
        },
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse"
        }
    },
    "handlers": {
        "console": {
            "level": "ERROR",
            # "level": "DEBUG",
            "filters": ["require_debug_false"],
            "class": "logging.StreamHandler"
        }, # file handlers don't work in docker
        # 'request_error_handler': {
        #     'level': 'INFO',
        #     # 'class': 'logging.handlers.RotatingFileHandler',
        #     'class': 'logging.FileHandler',
        #     'filename': os.path.join(LOG_DIR, f'req_error_log.log'),
        #     # 'maxBytes': 1024*1024*5,  # 5 MB  # disabled for windows host
        #     # 'backupCount': 10,  # disabled for windows host
        #     'formatter': 'standard',
        #     'mode': 'a'
        # },
        # 'celery_handler': {
        #     'level': 'ERROR',
        #     # 'class': 'logging.handlers.RotatingFileHandler',  # disabled for windows host
        #     'class': 'logging.FileHandler',
        #     'filename': os.path.join(LOG_DIR, f'celery_log.log'),
        #     # 'maxBytes': 1024*1024*5,  # 5 MB  disabled for windows host
        #     # 'backupCount': 10,  # disabled for windows host
        #     'formatter': 'standard',
        #     'mode': 'a'
        # },
    },
    "loggers": {
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False
        },
        'celery': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False
        }
    }
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REDIS_URL = 'redis'

CELERY_BROKER_URL = 'redis://redis:6379'
CELERY_RESULT_BACKEND = 'redis://redis:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

MONGO_URI = f"mongodb://{get_from_config('MONGO_DB_USER', 'root')}:{get_from_config('MONGO_DB_PASSWORD', 'admin#afifa')}@mongodb:27017/"
MONGO_DB_NAME = 'test_afifa'
